{% extends 'SonataAdminBundle:CRUD:base_show.html.twig' %}

{% block sonata_admin_content %}
<div class="sonata-ba-show">
    <div class="sonata-ba-view row">
        <div class="col-md-5">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title"><strong>Enviar inpecció núm. {{ object.id }} per email</strong></h4><br>
                    <h4 class="box-title" style="margin-bottom:40px">{{ object }}</h4>
                    <div class="box-body table-responsive no-padding">
                        {{ form(form) }}
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h4 class="box-title" style="margin-bottom:20px">PDF</h4>
                    <div class="box-body table-responsive no-padding">
                        <div class="btn-group btn-group-xs" role="group" aria-label="pager">
                            <button id="prev" class="btn btn-info"><i class="fa fa-chevron-left"></i></button>
                            <button id="next" class="btn btn-info"><i class="fa fa-chevron-right"></i></button>
                        </div>
                        <span class="label label-default pull-right">{{ 'pdf.footer.1_page' | trans | lower }} <span id="page_num"></span> / <span id="page_count"></span></span>
                        <canvas id="pdf-canvas"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('build/pdfjs/pdf.js') }}"></script>
    <script type="text/javascript">
        jQuery(document).ready(function() {
            pdfjsLib.GlobalWorkerOptions.workerSrc = '/build/pdfjs/pdf.worker.js';
            var url = '{{ pdf_short_path }}',
                pdfDoc = null,
                pageNum = 1,
                pageRendering = false,
                pageNumPending = null,
                scale = 1,
                canvas = document.getElementById('pdf-canvas'),
                ctx = canvas.getContext('2d'),
                loadingTask = pdfjsLib.getDocument(url);
            loadingTask.promise.then(function(pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('page_count').textContent = pdfDoc.numPages;
                // Initial/first page rendering
                renderPage(pageNum);
            });
            function renderPage(num) {
                pageRendering = true;
                // Using promise to fetch the page
                pdfDoc.getPage(num).then(function(page) {
                    var viewport = page.getViewport({scale: scale});
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    // Render PDF page into canvas context
                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                    };
                    var renderTask = page.render(renderContext);
                    // Wait for rendering to finish
                    renderTask.promise.then(function() {
                        pageRendering = false;
                        if (pageNumPending !== null) {
                            // New page rendering is pending
                            renderPage(pageNumPending);
                            pageNumPending = null;
                        }
                    });
                });
                // Update page counters
                document.getElementById('page_num').textContent = num;
            }
            // If another page rendering in progress, waits until the rendering if finised. Otherwise, executes rendering immediately.
            function queueRenderPage(num) {
                if (pageRendering) {
                    pageNumPending = num;
                } else {
                    renderPage(num);
                }
            }
            function onPrevPage() {
                if (pageNum <= 1) {
                    return;
                }
                pageNum--;
                queueRenderPage(pageNum);
            }
            document.getElementById('prev').addEventListener('click', onPrevPage);
            function onNextPage() {
                if (pageNum >= pdfDoc.numPages) {
                    return;
                }
                pageNum++;
                queueRenderPage(pageNum);
            }
            document.getElementById('next').addEventListener('click', onNextPage);
        });
    </script>
{% endblock %}
