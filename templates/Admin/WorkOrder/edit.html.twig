{% extends "Admin/edit.html.twig" %}

{% block body_attributes %}class="sonata-bc skin-black fixed sidebar-collapse"{% endblock %}

{% block sonata_tab_content %}
    {{ parent() }}
    {% if admin.id(object) %}
        {# edit mode #}
        <div class="col-md-12">
            <div class="box box-success">
                <div class="box-header">
                    <h4 class="box-title">{{ 'admin.deliverynote.title' | trans }}</h4>
                </div>
                {% include "Admin/Cells/list__delivery_notes.html.twig" with {show_edit_button: true} %}
            </div>
        </div>
    {% endif %}
{% endblock %}

{# override javascript includes #}
{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('bundles/fosjsrouting/js/router.min.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', {callback: 'fos.Router.setData'}) }}"></script>
    <script type="text/javascript">
        jQuery(document).ready(function() {
            let customerNode = jQuery('#{{ form.customer.vars.id }}');
            let windfarmsNode = jQuery('#{{ form.windfarms.vars.id }}');
            customerNode.on('change', function(event) {updateWindfarmNodeByCustomer(event.val);});
            {% if admin.id(object) %}
                {# edit mode #}
                {% if not object.isFromAudit %}
                    // windfarmsNode.select2('enable', false);
                {% endif %}
                {% if object.workOrderTasks | length > 0 %}
                    let bor = jQuery('#field_widget_{{ form.workOrderTasks.vars.id }}')[0].children[0].children[0].children[0];
                    // bor.children[1].width = '30%';
                    bor.children[2].width = '5%';
                    bor.children[3].width = '5%';
                    bor.children[4].width = '5%';
                    bor.children[5].width = '5%';
                    bor.children[6].width = '5%';
                    bor.children[7].width = '5%';
                    // bor.children[9].width = '30%';
                    let workOrderTasks = jQuery('#field_widget_{{  form.workOrderTasks.vars.id }}')[0].children[0].children[1].childElementCount;
                    let windmillNodes = [];
                    for (let i = 0; i < workOrderTasks; i++) {
                        windmillNodes[i] = jQuery('#{{ form.workOrderTasks.vars.id }}_' + i + '_windmill');
                        windmillNodes[i].change((function() {
                            let k = i;
                            return function (event) {
                                let windmillBladeId = event.val;
                                let windmillNode = windmillNodes[k];
                                updateWindmillBladeNodeByWindmill(windmillBladeId, windmillNode, k);
                            }
                        })());
                    }
                {% endif %}
                jQuery(document).on('sonata.add_element', function(event, elementId, objectId, uniqid) {
                    // TODO Update only the new object
                    let workOrderTasks = jQuery('#field_widget_{{  form.workOrderTasks.vars.id }}')[0].children[0].children[1].childElementCount;
                    let windmillNodes = [];
                    let windfarmNode = jQuery('#s2id_{{ form.windfarms.vars.id }}');
                    let windfarmsName = [];
                    for (let i = 0; i < windfarmNode[0].children[0].children.length - 1; i++) {
                        windfarmsName[i] = windfarmNode[0].children[0].children[i].innerText;
                    }
                    for (let i = 0; i < workOrderTasks; i++) {
                        windmillNodes[i] = jQuery('#{{ form.workOrderTasks.vars.id }}_' + i + '_windmill');
                        console.log(windmillNodes[i]);
                        updateWindmillNodeByWindfarms(windfarmsName, windmillNodes[i]);
                        windmillNodes[i].change((function() {
                            let k = i;
                            return function (event) {
                                let windmillBladeId = event.val;
                                let windmillNode = windmillNodes[k];
                                updateWindmillBladeNodeByWindmill(windmillBladeId, windmillNode, k);
                            }
                        })());
                    }
                });
                function updateWindmillBladeNodeByWindmill(windmillBladeId, windmillNode, i) {
                    jQuery.get(Routing.generate('admin_app_workorder_getWindmillbladesFromWindmillId', {id: windmillBladeId})).done(function (response) {
                        let jsonResponse = jQuery.parseJSON(response);
                        let windmillBladeNode = jQuery('#{{ form.workOrderTasks.vars.id }}_'+i+'_windmillBlade');
                        // TODO be careful in EDIT mode (previously Audit maybe selected when WorkOrder is from Audit)
                        while (windmillBladeNode[0].firstChild) {
                            windmillBladeNode[0].removeChild(windmillBladeNode[0].firstChild);
                        }
                        if (jsonResponse.data.length > 0) {
                            for (let j = 0; j < jsonResponse.data.length; j++) {
                                let option = document.createElement("option");
                                option.innerText = jsonResponse.data[j].order + '(id: ' + jsonResponse.data[j].id + ')';
                                option.value = jsonResponse.data[j].id;
                                windmillBladeNode[0].appendChild(option);
                            }
                        }
                    })
                }
            {% else %}
                {# create mode (new) #}
                let selectedFirstOptionCustomerId = parseInt(jQuery('#{{ form.customer.vars.id }} option:eq(0)').prop('value'), 10);
                updateWindfarmNodeByCustomer(selectedFirstOptionCustomerId);
            {% endif %}
        });
        function updateWindfarmNodeByCustomer(customerId) {
            let windfarmsNode = jQuery('#{{ form.windfarms.vars.id }}');
            jQuery.get(Routing.generate('admin_app_workorder_getWindfarmsFromCustomerId', {id: customerId})).done(function (response) {
                let jsonResponse = jQuery.parseJSON(response);
                // console.log('updateWindfarmNodeByCustomer', jsonResponse);
                windfarmsNode.empty().html(jsonResponse.htmlOptionStringData);
                {% if not admin.id(object) %}
                    windfarmsNode.select2('val', '');
                {% endif %}
            });
        }
        function updateWindmillNodeByWindfarms(windfarmsName, windmillNode) {
            console.log(windfarmsName);
            jQuery.post(Routing.generate('admin_app_workorder_getWindmillsFromWindfarmsName', windfarmsName)).done(function (response) {
                let jsonResponse = jQuery.parseJSON(response);
//                console.log(windmillNode);
//                console.log(jsonResponse,'jsonresponse');
//                console.log(response,'response');
                // TODO be careful in EDIT mode (previously Audit maybe selected when WorkOrder is from Audit)
                while (windmillNode[0].firstChild) {
                    windmillNode[0].removeChild(windmillNode[0].firstChild);
                }
                if (jsonResponse.data.length > 0) {
                    for (let i = 0; i < jsonResponse.data.length; i++) {
                        let option = document.createElement("option");
                        option.innerText = jsonResponse.data[i].text;
                        option.value = jsonResponse.data[i].id;
                        windmillNode[0].appendChild(option);
                    }
                }
            });
        }
    </script>
{% endblock %}
