{% extends "Admin/edit.html.twig" %}

{% block body_attributes %}class="sonata-bc skin-black fixed sidebar-collapse"{% endblock %}

{% block sonata_tab_content %}
    {{ parent() }}
    {% if admin.id(object) %}
        {# edit mode #}
        <div class="col-md-12">
            <div class="box box-success">
                <div class="box-header">
                    <h4 class="box-title">{{ 'admin.deliverynote.title' | trans }}</h4>
                </div>
                {% include "Admin/Cells/list__delivery_notes.html.twig" with {show_edit_button: true} %}
            </div>
        </div>
    {% endif %}
{% endblock %}

{# override javascript includes #}
{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('bundles/fosjsrouting/js/router.min.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', {callback: 'fos.Router.setData'}) }}"></script>
    <script type="text/javascript">
        Dropzone.autoDiscover = false;
        jQuery(document).ready(function() {
            let customerNode = jQuery('#{{ form.customer.vars.id }}');
            customerNode.on('change', function(event) {
                updateWindfarmNodeBySelectedCustomerId(event.val);
            });
            {% if admin.id(object) %}
                {# edit mode #}
                {% if object.workOrderTasks | length > 0 %}
                    fixWorkOrderTasksColumnWidths();
                    let workOrderTasksAmount = jQuery('#field_widget_{{  form.workOrderTasks.vars.id }}')[0].children[0].children[1].childElementCount;
                    let windmillNodes = [];
                    for (let i = 0; i < workOrderTasksAmount; i++) {
                        windmillNodes[i] = jQuery('#{{ form.workOrderTasks.vars.id }}_' + i + '_windmill');
                        updateWindmillBladeNodeBySelectedWindmillId(windmillNodes[i].val(), windmillNodes[i], i, false);
                        setDropzone(i);
                        windmillNodes[i].change((function() {
                            let k = i;
                            return function (event) {
                                let windmillId = event.val;
                                let windmillNode = windmillNodes[k];
                                updateWindmillBladeNodeBySelectedWindmillId(windmillId, windmillNode, k, true);
                            }
                        })());
                    }
                {% endif %}
                jQuery(document).on('sonata.add_element', function(/*event, elementId, objectId, uniqid*/) {
                    fixWorkOrderTasksColumnWidths();
                    let workOrderTasksAmount = jQuery('#field_widget_{{ form.workOrderTasks.vars.id }}')[0].children[0].children[1].childElementCount;
                    let windmillNodes = [];
                    for (let i = 0; i < workOrderTasksAmount; i++) {
                        windmillNodes[i] = jQuery('#{{ form.workOrderTasks.vars.id }}_' + i + '_windmill');
                        updateWindmillBladeNodeBySelectedWindmillId(windmillNodes[i].val(), windmillNodes[i], i, false);
                        setDropzone(i);
                        windmillNodes[i].change((function() {
                            let k = i;
                            return function (event) {
                                let windmillId = event.val;
                                let windmillNode = windmillNodes[k];
                                updateWindmillBladeNodeBySelectedWindmillId(windmillId, windmillNode, k, true);
                            }
                        })());
                    }
                });
                function updateWindmillBladeNodeBySelectedWindmillId(windmillId, windmillNode, nodeIndex, needWindmillBladeSetToNull) {
                    jQuery.get(Routing.generate('admin_app_workorder_getWindmillbladesFromWindmillId', {id: windmillId})).done(function (response) {
                        let jsonResponse = jQuery.parseJSON(response);
                        let windmillBladeNode = jQuery('#{{ form.workOrderTasks.vars.id }}_' + nodeIndex + '_windmillBlade');
                        let windmillBladeNodeVal = parseInt(windmillBladeNode.val());
                        windmillBladeNode.empty().html(jsonResponse.htmlOptionStringData);
                        if (needWindmillBladeSetToNull) {
                            windmillBladeNode.select2('val', '');
                        } else {
                            windmillBladeNode.select2('val', windmillBladeNodeVal);
                        }
                    })
                }
            {% else %}
                {# create mode (new) #}
                let selectedFirstOptionCustomerId = parseInt(jQuery('#{{ form.customer.vars.id }} option:eq(0)').prop('value'), 10);
                updateWindfarmNodeBySelectedCustomerId(selectedFirstOptionCustomerId);
            {% endif %}
        });
        function updateWindfarmNodeBySelectedCustomerId(customerId) {
            jQuery.get(Routing.generate('admin_app_workorder_getWindfarmsFromCustomerId', {id: customerId})).done(function (response) {
                let jsonResponse = jQuery.parseJSON(response);
                let windfarmsNode = jQuery('#{{ form.windfarms.vars.id }}');
                windfarmsNode.empty().html(jsonResponse.htmlOptionStringData);
                {% if not admin.id(object) %}
                    windfarmsNode.select2('val', '');
                {% endif %}
            });
        }
        function fixWorkOrderTasksColumnWidths() {
            {% if object.workOrderTasks | length > 0 %}
                let bor = jQuery('#field_widget_{{ form.workOrderTasks.vars.id }}')[0].children[0].children[0].children[0];
                bor.children[0].width = '5%';
                bor.children[3].width = '5%';
                bor.children[4].width = '5%';
                bor.children[5].width = '5%';
                bor.children[6].width = '5%';
                bor.children[7].width = '5%';
                bor.children[8].width = '5%';
                bor.children[11].width = '5%';
                if (bor.children[12]) {
                    bor.children[12].width = '5%';
                }
            {% endif %}
        }
        function setDropzone(index) {
            {% if object.workOrderTasks | length > 0 %}
                let myDropzone = new Dropzone('#{{ form.workOrderTasks.vars.id }}_' + index + '_multifiles', {
                    url: Routing.generate('admin_app_workorder_uploadWorkOrderTaskFile', {id: {{ object.id }}, filerowindex: index}),
                    uploadMultiple: false,
                    maxFiles: 5,
                    thumbnailWidth: 80,
                    thumbnailHeight: 80,
                    parallelUploads: 20,
                    addRemoveLinks: true,
                    dictDefaultMessage: '<i class="fa fa-cloud-upload"></i> Arrastra aquÃ­ tus archivos.',
                    autoQueue: true,
                    init: function() {
                        let myDropzone = this;
                        jQuery.get(Routing.generate('admin_app_workorder_getUploadedWorkOrderTaskPhotosForWorkOrderAndFileRow', {id: {{ object.id }}, filerowindex: index}), function(serverResponse) {
                            console.log('init server response getUploadedWorkOrderTaskPhotosForWorkOrderAndFileRow', serverResponse);
                            let hits = serverResponse.hit;
                            if (jQuery.isArray(hits) && hits.length > 0 ) {
                                jQuery.each(hits, function(i, val) {
                                    let mockFile = { name: "Filename "+i, size: 12345 };
                                    myDropzone.displayExistingFile(mockFile, val);
                                });
                            }
                        });
                        console.log('init', myDropzone);
                    }
                });
                myDropzone.on("addedfile", function(file) {
                    console.log('addedfile event fired', file);
                });
                myDropzone.on("removedfile", function(file) {
                    console.log('removedfile event fired', file);
                });
                myDropzone.on("success", function(file, serverResponse) {
                    console.log('success event fired', file, serverResponse);
                });
                myDropzone.on("error", function(file, errorMessage) {
                    console.log('error event fired', file, errorMessage);
                });
            {% endif %}
        }
    </script>
{% endblock %}
